#define F_CPU 16000000L

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/atomic.h>
#include <util/delay.h>

#include <stdlib.h>
#include <stdio.h>
#include <avr/pgmspace.h> // PSTR

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define PENDULUM_ANGLE_MOD2PI 0
#define PENDULUM_USE_INDEX_SIGNAL 0
#define DETERIORATE_MEASURES 0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define  INPUT2(port,pin)   DDR ## port &= ~_BV(pin) 
#define OUTPUT2(port,pin)   DDR ## port |=  _BV(pin) 
#define  CLEAR2(port,pin)  PORT ## port &= ~_BV(pin) 
#define    SET2(port,pin)  PORT ## port |=  _BV(pin) 
#define   READ2(port,pin) ((PIN ## port & _BV(pin))?1:0)

#define  INPUT(x)  INPUT2(x) 
#define OUTPUT(x) OUTPUT2(x)
#define  CLEAR(x)  CLEAR2(x)
#define    SET(x)    SET2(x)
#define   READ(x)   READ2(x)
#define  WRITE(x,b) ((b)?(SET2(x)):(CLEAR2(x)))

#define SHIFT_PL_PIN      D,2
#define SHIFT_CP_PIN      D,3
#define SHIFT_Q7_PIN      C,3

#define DECODER_CHIX_PIN  D,7 
#define DECODER_OE_PIN    B,1
#define DECODER_XY_PIN    C,2
#define DECODER_SEL1_PIN  B,0
#define DECODER_SEL2_PIN  C,1
#define DECODER_RST_PIN   D,4

#define AMPLIFIER_ENABLE_PIN B,2

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

volatile uint16_t adc0; // adc readings
volatile int32_t adc0_zero = 51200;
volatile uint8_t timer1_overflows; // global variable to count the number of overflows of timer1

volatile int32_t pendulum_offset = 4000; // index pulse position in ticks
volatile int32_t pendulum_ticks  = 0;    // current angle measurement, in ticks

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline int16_t current(int16_t reference) { // mA
    if (reference> 5000) reference =  5000;
    if (reference<-5000) reference = -5000;

    reference = ((int32_t)(reference)*15620L)/10000L; // на диффвыходе ардуины и входе в усилитель получается делитель с резисторами 4.7k и 10k

    int16_t pwm = ((int32_t)(reference)*255L)/5000L;

    if (pwm>=0) {
        OCR0A = 255;
        OCR0B = 255-pwm;
    } else {
        OCR0A = 255+pwm;
        OCR0B = 255;
    }

    int16_t reality = 0;
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        reality = adc0;
    }

    // АЦП adc0_val бегает от 0 до 1023, при этом ноль ампер соответствует 1023/2 АЦП
    // поэтому сначала преобразуем adc0_val в значение от -512 до 512, с нулём ампер в нуле: adc0_val - 512
    // чтобы получить амперы из выражения (adc0_val - 512), надо его умножить на (1/512)*(2.5V/.185V/A)
    reality = ((int32_t)(reality*100L - adc0_zero)*1000L)/4733L; // измеряется в миллиамперах

    return reality;

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void adc_init() {
    // Bits 7:6    01 - Set REFS1..0 in ADMUX to AREF, to change reference voltage to the proper source
    // Bits 7:6    00 - Set REFS1..0 in ADMUX to AREF, internal Vref turned off
    // Bit  5       0 - clear ADLAR in ADMUX (0x7C) to right-adjust the result ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits)
    // Bit  4       0 - unused
    // Bits 3:0  0000 - ADC0 (Table 24-4)
    ADMUX = 0b01000000;

    // Bit  7      1 - ADC Enable
    // Bit  6      0 - ADC Start conversion (well, no start here)
    // Bit  5      1 - ADC Auto trigger enable
    // Bit  4      0 - ADC Interrupt flag (this bit is set when an ADC conversion completes and the Data Registers are updated)
    // Bit  3      1 - ADC Interrupt enable (without this, the internal interrupt will not trigger)
    // Bits 2:0  111 - Set the prescaler to 128 (16000KHz/128 = 125KHz)
    ADCSRA = 0b10101111;

    // Bits 7, 5:3 - Reserved, these bits must be written to zero when ADCSRB is written.
    // Bit  6      - ACME: Analog Comparator Multiplexer Enable
    // Bits 2:0    - ADC Auto Trigger Source (free running here, this means that as soon as an ADC has finished, the next will be immediately started)
    ADCSRB = 0b00000000;

    sei();

    // Set ADSC in ADCSRA (0x7A) to start the ADC conversion
    ADCSRA |= 0b01000000;
}

ISR(ADC_vect) { // Interrupt service routine for the ADC completion
    adc0 = ADCL | (ADCH<<8);  // Must read low first
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void pwm_init() {
    DDRD |= (1 << DDD6) | (1 << DDD5); // PD6 and PD5 are now output

    OCR0A = OCR0B = 255; // set PWM for 0% duty cycle

    TCCR0A  = (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0); // set inverting mode  to avoid spikes for zero duty cycles
    TCCR0A |= (1 << WGM01) | (1 << WGM00);   // set fast PWM Mode
    TCCR0B |= (1 << CS00);                   // no prescaling
}
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void decoder_init() {
    OUTPUT(DECODER_OE_PIN);
    OUTPUT(DECODER_XY_PIN);
    OUTPUT(DECODER_SEL1_PIN);
    OUTPUT(DECODER_SEL2_PIN);
    OUTPUT(DECODER_RST_PIN);
    SET(DECODER_RST_PIN); // reset is active low 

    INPUT(DECODER_CHIX_PIN);
    PCICR  |= _BV(PCIE2);  // interrupt will be fired on any change on pin DECODER_CHIX_PIN
    PCMSK2 |= _BV(7);      // DECODER_CHIX_PIN = D7
    sei();
}

void shift_register_init() {
    OUTPUT(SHIFT_PL_PIN);
    OUTPUT(SHIFT_CP_PIN);
    INPUT(SHIFT_Q7_PIN);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const uint8_t avago_byte_select[4][2] = {{1,0},{0,0},{1,1},{0,1}};
inline void decoder_latch_byte(uint8_t i) {
    WRITE(DECODER_SEL1_PIN, avago_byte_select[i][0]);
    WRITE(DECODER_SEL2_PIN, avago_byte_select[i][1]);
}

uint8_t read_shift_register() {
    uint8_t result = 0;
    CLEAR(SHIFT_PL_PIN);
    _delay_us(10);
    SET(SHIFT_PL_PIN);
    for (uint8_t i=8; i--;) {
        result |= (READ(SHIFT_Q7_PIN)<<(i));
        SET(SHIFT_CP_PIN);
        _delay_us(10);
        CLEAR(SHIFT_CP_PIN);
        _delay_us(10);
    }
    return result;
}

int32_t read_decoder(uint8_t encoder) {
    int32_t result = 0;
    WRITE(DECODER_XY_PIN, encoder);
    CLEAR(DECODER_OE_PIN);
    _delay_us(10); // The OE/, SEL1, and SEL2 inputs are sampled by the internal inhibit logic on the falling edge of the clock
    for (uint8_t i=4; i--;) {
        decoder_latch_byte(i);
        result += read_shift_register();
        if (i) result <<= 8;
    }
    SET(DECODER_OE_PIN);
    return result;
}

void decoder_reset() {
    CLEAR(DECODER_RST_PIN);
    _delay_ms(1);
    SET(DECODER_RST_PIN);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void uart_write(char x) {
    while ((UCSR0A & (1<<UDRE0))==0); // wait for empty receive buffer
    UDR0 = x; // send
}

uint8_t uart_char_is_waiting() { // returns 1 if a character is waiting, 0 otherwise
    return (UCSR0A & (1<<RXC0));
}

char uart_read() {
    while (!uart_char_is_waiting());
    char x = UDR0;
    return x;
}

int uart_putchar(char c, FILE *stream __attribute__((unused))) {
    uart_write(c);
    return 0;
}

int uart_getchar(FILE *stream __attribute__((unused))) {
    return uart_read();
}

void uart_init() {
    UBRR0H = 0;        // For divisors see table 19-12 in the atmega328p datasheet.
    UBRR0L = 16;       // U2X0, 16 -> 115.2k baud @ 16MHz. 
    UCSR0A = 1<<U2X0;  // U2X0, 207 -> 9600 baud @ 16Mhz.
    UCSR0B = 1<<TXEN0; // Enable  the transmitter. Reciever is disabled.
    UCSR0C = (1<<UDORD0) | (1<<UCPHA0);
    fdevopen(&uart_putchar, &uart_getchar);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void timer_init() {
    TCCR1B = (1 << CS10) | (1<<CS12); // set up timer with prescaler = 1024
    TCNT1 = 0;                        // initialize counter
    TIMSK1 |= (1 << TOIE1);           // enable overflow interrupt
    sei();                            // enable global interrupts
    timer1_overflows = 0;             // initialize overflow counter variable
}

ISR(TIMER1_OVF_vect) { // TIMER1 overflow interrupt service routine called whenever TCNT1 overflows
    timer1_overflows++;    // keep a track of number of overflows
}

inline void reset_current_time() {
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        TCNT1 = 0;
        timer1_overflows = 0;
    }
}

inline int32_t get_current_time() {
    int32_t useconds;
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        useconds = (TCNT1 + ((uint32_t)timer1_overflows<<16)) << 6;
    }
    return useconds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline int32_t get_cart_position() {
    int32_t tmp = read_decoder(0)*18L; // microns, #ticks*(36 teeth * 0.002m pitch)/(1000 ticks/rev * 4x) gives meters, multiplying it by 10^6 we get microns
#if DETERIORATE_MEASURES    
    tmp &= ~63L;
#endif    
    return tmp;
}

ISR (PCINT2_vect) { // D9 has changed, thus index pulse fired, updating its position
#if PENDULUM_USE_INDEX_SIGNAL
    pendulum_offset = pendulum_ticks;
#endif
}

inline int32_t get_pendulum_angle() {
    cli();
    pendulum_ticks = read_decoder(1);
#if DETERIORATE_MEASURES    
    pendulum_ticks &= ~15L;
#endif    
    long tticks = pendulum_ticks - pendulum_offset; // if index pulse position off the balance, correct it here
    sei();

#if PENDULUM_ANGLE_MOD2PI
    while (tticks> 4000) tticks -= 8000; // mod 2pi
    while (tticks<-4000) tticks += 8000;
#endif

    return tticks*45L; // millidegrees, #ticks * 360 / (2000 ticks/rev * 4x) gives degrees
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const uint8_t sinewave_halfperiod[] PROGMEM = {
0x0, 0x3, 0x6, 0x9, 0xc, 0xf, 0x12,0x15,0x18,0x1c,0x1f,0x22,0x25,0x28,0x2b,0x2e,
0x31,0x34,0x37,0x3a,0x3d,0x40,0x44,0x47,0x4a,0x4d,0x4f,0x52,0x55,0x58,0x5b,0x5e,
0x61,0x64,0x67,0x6a,0x6d,0x6f,0x72,0x75,0x78,0x7a,0x7d,0x80,0x83,0x85,0x88,0x8b,
0x8d,0x90,0x92,0x95,0x97,0x9a,0x9c,0x9f,0xa1,0xa4,0xa6,0xa8,0xab,0xad,0xaf,0xb2,
0xb4,0xb6,0xb8,0xba,0xbc,0xbf,0xc1,0xc3,0xc5,0xc7,0xc9,0xca,0xcc,0xce,0xd0,0xd2,
0xd4,0xd5,0xd7,0xd9,0xda,0xdc,0xdd,0xdf,0xe0,0xe2,0xe3,0xe5,0xe6,0xe7,0xe9,0xea,
0xeb,0xec,0xed,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf4,0xf5,0xf6,0xf7,0xf8,0xf8,0xf9,
0xfa,0xfa,0xfb,0xfb,0xfc,0xfc,0xfd,0xfd,0xfd,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,
0xff,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfd,0xfd,0xfd,0xfc,0xfc,0xfb,0xfb,0xfa,
0xfa,0xf9,0xf8,0xf8,0xf7,0xf6,0xf5,0xf4,0xf4,0xf3,0xf2,0xf1,0xf0,0xef,0xed,0xec,
0xeb,0xea,0xe9,0xe7,0xe6,0xe5,0xe3,0xe2,0xe0,0xdf,0xdd,0xdc,0xda,0xd9,0xd7,0xd5,
0xd4,0xd2,0xd0,0xce,0xcc,0xca,0xc9,0xc7,0xc5,0xc3,0xc1,0xbf,0xbc,0xba,0xb8,0xb6,
0xb4,0xb2,0xaf,0xad,0xab,0xa8,0xa6,0xa4,0xa1,0x9f,0x9c,0x9a,0x97,0x95,0x92,0x90,
0x8d,0x8b,0x88,0x85,0x83,0x80,0x7d,0x7a,0x78,0x75,0x72,0x6f,0x6d,0x6a,0x67,0x64,
0x61,0x5e,0x5b,0x58,0x55,0x52,0x4f,0x4d,0x4a,0x47,0x44,0x40,0x3d,0x3a,0x37,0x34,
0x31,0x2e,0x2b,0x28,0x25,0x22,0x1f,0x1c,0x18,0x15,0x12,0xf, 0xc, 0x9, 0x6, 0x3};

inline int32_t sine(int32_t idx) { // one period equals 512 idx units
    if (idx & 0x100) {
        return -pgm_read_byte(&sinewave_halfperiod[idx & 0xFF]);
    } else {
        return  pgm_read_byte(&sinewave_halfperiod[idx & 0xFF]);
    }
}

inline int32_t cosine(int32_t idx) { // one period equals 512 idx units
    return sine(idx+128);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void constant_current_open_loop(int16_t current_ref, int32_t duration_ms, FILE *uart_stream_ptr) {
//    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg)\r\n"));
    int32_t time_of_start, useconds;
    useconds = time_of_start = get_current_time();

    int32_t cart_position, pendulum_angle;

    while (useconds < time_of_start+duration_ms*1000L) {
        useconds = get_current_time();
        int16_t current_measured = current(current_ref);

        cart_position = get_cart_position();
        pendulum_angle = get_pendulum_angle();

        fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld\r\n"), useconds, current_ref, current_measured, cart_position, pendulum_angle);
    }
    current(0);
}


// frequencies are given in mHz
void chirp_current_open_loop(int16_t amplitude, int32_t start_freq, int32_t end_freq, int32_t duration_ms, FILE *uart_stream_ptr) {
    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg)\r\n"));
    int32_t time_of_start, useconds;
    useconds = time_of_start = get_current_time();

    int32_t cart_position, pendulum_angle;
    int16_t current_ref, current_measured;
    while (useconds < time_of_start+duration_ms*1000L) {
        useconds = get_current_time();
        int32_t cur_ms = (useconds-time_of_start)/1000L;
        int32_t phi = ((start_freq + ((end_freq-start_freq)*cur_ms)/(2L*duration_ms))*cur_ms)/1000L; // период синусоиды равен тысяче единиц phi
        int32_t sine_idx = ((phi*512L)/1000L) & 0x1FF;
        current_ref = (sine(sine_idx)*(int32_t)(amplitude))/255L;
        current_measured = current(current_ref);

        cart_position = get_cart_position();
        pendulum_angle = get_pendulum_angle();

        fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld\r\n"), useconds, current_ref, current_measured, cart_position, pendulum_angle);
    }
    current(0);
}


#define sgn(v) ( ( (v) < 0. ) ? -1. : ( (v) > 0. ) )

void stabilize(FILE *uart_stream_ptr) {
    int32_t useconds, useconds_prev, time_of_start;
    time_of_start = useconds = useconds_prev = get_current_time();

    int32_t cart_position, cart_position_prev, pendulum_angle, pendulum_angle_prev;
    cart_position  = cart_position_prev  = get_cart_position();
    pendulum_angle = pendulum_angle_prev = get_pendulum_angle();



// sliding motion observer
//#define SMO 
// parameter-based estimation
#define PEBO
// high-gain observer
//#define HGO
// high-gain observer order 6
//#define HGO6
// finite differences
//#define FD

    float hatX = 0;
    float hatQ = 0;
#if defined SMO
    float hatDX = 0;
    float hatDQ = 0;
#elif defined PEBO    
    float hatLPX = 0;
    float hatLPQ = 0;
#elif defined HGO    
    float hatDX = 0;
    float hatDQ = 0;
#elif defined HGO6
    float hatDX = 0;
    float hatDQ = 0;
    float hatSigmaX = 0;
    float hatSigmaQ = 0;
#elif defined FD
    const int8_t memlen = 3;
    int32_t TH[memlen], cnt = 0;
#endif    

    int8_t state = 0;
    int16_t current_ref, current_measured = 0;
    int32_t duration_ms = 30000L;
    int32_t target = 0, dtarget = 400;
    int32_t iteration = 0;
    while (1) {
        iteration++;
        useconds_prev          = useconds;
        cart_position_prev     = cart_position;
        useconds       = get_current_time();
#if DETERIORATE_MEASURES        
        if (0==iteration%2) {
#else
        {
#endif        
            cart_position  = get_cart_position();
            pendulum_angle = get_pendulum_angle();
        }


        if (0==state) {
            hatQ = pendulum_angle*3.14159/180.000/1000.;
            hatX = cart_position/1000000.;
            fprintf_P(uart_stream_ptr, PSTR("%ld %ld\r\n"), cart_position, pendulum_angle);
            if (labs(pendulum_angle)<5000L) {
                state = 1;
                time_of_start = useconds;
                if (dtarget) {
                    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg),target(um)\r\n"));
                } else {
                    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg)\r\n"));
                }
            }
        }
        if (1==state) {
            if (useconds - time_of_start > duration_ms*1000L) break;
            if (labs(cart_position)>300000L || labs(pendulum_angle)>30000L) break;

            int32_t v = ((cart_position  - cart_position_prev)*1000L)/(useconds-useconds_prev); //   mm/sec

            float Ki = 8.864;
            float fricpos =  3.804*.8;
            float fricneg = -2.716*.8;

            float u = current_measured*Ki/1000.;
            if (labs(v)>1) {
                if (v>0)  
                    u -= fricpos;
                else
                    u -= fricneg;
            } else {
                if (u>0) {
                    if (u>fricpos) u -= fricpos;
                    else u = 0;
                } else {
                    if (u<fricneg) u -= fricneg;
                    else u = 0;
                }
            }

            float dt = (useconds-useconds_prev)/1000000.;
#if defined SMO
            float mesQ = pendulum_angle*3.14159/180000.;
            float mesX = cart_position/1000000.;
            float cosQ = cos(mesQ);
            float sinQ = sin(mesQ);

            float A = 1./(cosQ*cosQ - 5.011);
            float diffDX = 30.8*sgn(mesX - hatX) - (3.465*u + .437*hatDQ*hatDQ*sinQ -   9.810*cosQ*sinQ) * A;
            float diffDQ = 85.8*sgn(mesQ - hatQ) + (7.936*u*cosQ - 112.601*sinQ + hatDQ*hatDQ*cosQ*sinQ) * A;
            float diffX = hatDX +  7.937*sgn(mesX - hatX)*sqrt(fabsf(hatX - mesX));
            float diffQ = hatDQ + 13.248*sgn(mesQ - hatQ)*sqrt(fabsf(hatQ - mesQ));

            hatX  = hatX  + dt*diffX;
            hatQ  = hatQ  + dt*diffQ;
            hatDX = hatDX + dt*diffDX;
            hatDQ = hatDQ + dt*diffDQ;
#elif defined PEBO    
            float mesQ = pendulum_angle*3.14159/180000.;
            float mesX = cart_position/1000000.;
            float cosQ = cos(mesQ);
            float sinQ = sin(mesQ);

            float A = 1./sqrt(683 - 136*cosQ*cosQ);

            float hatDQ = (111*hatLPQ) * A;
            float hatDX = 0.8315*hatLPX - (9*hatLPQ*cosQ) * A;

            float diffX = hatDX - 50*hatX + 50*mesX;
            float diffQ = 90*mesQ - 90*hatQ + hatDQ;
            float diffLPX = 332*mesX - 332*hatX + 0.8315*u + (3884*cosQ*(hatQ - mesQ)) * A;
            float diffLPQ = (16719*(mesQ - hatQ) + 137*sinQ - 9*u*cosQ) * A;

            hatX   = hatX   + dt*diffX;
            hatQ   = hatQ   + dt*diffQ;
            hatLPX = hatLPX + dt*diffLPX;
            hatLPQ = hatLPQ + dt*diffLPQ;
#elif defined HGO    
            float mesQ = pendulum_angle*3.14159/180000.;
            float mesX = cart_position/1000000.;
            float cosQ = cos(mesQ);
            float sinQ = sin(mesQ);

            float A = 1./(cosQ*cosQ - 5.011);
            // 20000 и 300 разваливаются
            float diffDX = 2222.0*(mesX - hatX) - (3.465*u + .437*hatDQ*hatDQ*sinQ - 9.810*cosQ*sinQ) * A;
            float diffDQ = 2222.0*(mesQ - hatQ) + (7.936*u*cosQ - 112.601*sinQ + hatDQ*hatDQ*cosQ*sinQ) * A;
            float diffX = hatDX + 100.0*(mesX - hatX);
            float diffQ = hatDQ + 100.0*(mesQ - hatQ);

            hatX  = hatX  + dt*diffX;
            hatQ  = hatQ  + dt*diffQ;
            hatDX = hatDX + dt*diffDX;
            hatDQ = hatDQ + dt*diffDQ;
#elif defined HGO6
            float mesQ = pendulum_angle*3.14159/180000.;
            float mesX = cart_position/1000000.;
            float cosQ = cos(mesQ);
            float sinQ = sin(mesQ);

            float A = 1./(cosQ*cosQ - 5.011);
            float diffDX = hatSigmaX + 5555.556*(mesX - hatX) - (3.465*u + .437*hatDQ*hatDQ*sinQ - 9.810*cosQ*sinQ) * A;
            float diffDQ = hatSigmaQ + 5555.556*(mesQ - hatQ) + (7.936*u*cosQ - 112.601*sinQ + hatDQ*hatDQ*cosQ*sinQ) * A;
            float diffX = hatDX + 166.667*(mesX - hatX);
            float diffQ = hatDQ + 166.667*(mesQ - hatQ);
            float diffSigmaX = 148148.1481*(mesX - hatX);
            float diffSigmaQ = 148148.1481*(mesQ - hatQ); 

            hatX  = hatX  + dt*diffX;
            hatQ  = hatQ  + dt*diffQ;
            hatDX = hatDX + dt*diffDX;
            hatDQ = hatDQ + dt*diffDQ;

            hatSigmaX = hatSigmaX + dt*diffSigmaX;
            hatSigmaQ = hatSigmaQ + dt*diffSigmaQ;
#elif defined FD
            TH[cnt%memlen] = pendulum_angle;
            cnt++;
            int32_t w = ((pendulum_angle - TH[cnt%memlen])*1000000L)/(memlen*(useconds-useconds_prev)); // mdeg/sec
#endif    
            int32_t K[] = {21L, 23L, 104L, 20L};

            if (target > 200000L || target<-200000L) dtarget = -dtarget;
            target += dtarget;
#if defined FD
            int32_t f = K[0]*((cart_position-target)/1000L) + K[1]*(v-dtarget/5) + (K[2]*314L*pendulum_angle)/18000L + K[3]*((314L*w)/18000L); // mN
#else            
            int32_t f = K[0]*((cart_position-target)/1000L) + K[1]*(int32_t)(hatDX*1000 - dtarget/5) + (K[2]*314L*pendulum_angle)/18000L + K[3]*(int32_t)(hatDQ*1000); // mN
#endif

            int32_t antifriction = 0;
            if (labs(v)>1) {
                if (v>0) antifriction = (int32_t)(fricpos*1000);
                else antifriction = (int32_t)(fricneg*1000);
            } else {
                if (labs(f)>10) {
                    if (f>0) antifriction = (int32_t)(fricpos*1000);
                    else antifriction = (int32_t)(fricneg*1000);
                } else f = 0;
            }
            current_ref = (int16_t)((f + antifriction)/Ki);

            if (current_ref >  5000L) current_ref =  5000L;
            if (current_ref < -5000L) current_ref = -5000L;
            fprintf_P(uart_stream_ptr, PSTR("%ld\r\n"), useconds-useconds_prev);
            current_measured = current(current_ref);
            if (dtarget) {
                fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld,%ld\r\n"), useconds-time_of_start, current_ref, current_measured, cart_position, pendulum_angle, target);
            } else {
                fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld\r\n"), useconds-time_of_start, current_ref, current_measured, cart_position, pendulum_angle);
            }
        }
    }
    current(0);
}

void random_current(int16_t amplitude, int32_t duration_ms, FILE *uart_stream_ptr) {
    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg)\r\n"));
    int32_t time_of_start, useconds, useconds_prev;
    useconds_prev = useconds = time_of_start = get_current_time();

    int32_t pendulum_angle;

    const int8_t memlen = 6;
    int32_t X[memlen], cnt=0;
    for (uint8_t i=memlen; i--; X[i] = 0);

    const uint8_t rndlen = 16;
    int16_t rnd[rndlen];
    for (uint8_t i=rndlen; i--; rnd[i] = 0);

    int16_t ridx = 0;
    int16_t current_reference, current_measured;
    uint8_t right = 1;


    while (useconds < time_of_start+duration_ms*1000L) {
        useconds_prev = useconds;
        useconds = get_current_time();

        X [cnt%memlen] = get_cart_position();
        cnt++;
        pendulum_angle = get_pendulum_angle();
        int32_t v = ((X[(cnt+memlen-1)%memlen]-X[cnt%memlen])*1000L)/(memlen*(useconds-useconds_prev)); //   mm/sec

        rnd[ridx%rndlen] = (rand()&1 ? 1 : -1)*rand()%amplitude;
        ridx++;
        current_reference = 0;
        for (uint8_t c=rndlen; c--; current_reference += rnd[c]);
        if (right) {
            current_reference = 300 + current_reference/rndlen;
            if (v<250 && current_reference < 400) current_reference = 400;
            if (v>750) current_reference = -400;
            if (X[(cnt+memlen-1)%memlen] > 600L*1000L) right = 0;
        } else {
            current_reference = -300 + current_reference/8;
            if (v>-250 && current_reference>-400) current_reference = -400;
            if (v<-750) current_reference = 400;
            if (X[(cnt+memlen-1)%memlen] < 200L*1000L) right = 1;
        }

        current_measured = current(current_reference);
        fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld\r\n"), useconds, current_reference, current_measured, X[(cnt+memlen-1)%memlen], pendulum_angle);
    }
    current(0);
}

// frequencies are given in mHz
void square_wave(int32_t amplitude, int32_t freq, int32_t duration_ms, FILE *uart_stream_ptr) {
    fprintf_P(uart_stream_ptr, PSTR("time(us),reference current(mA),current(mA),cart position(um),pendulum angle(mdeg)\r\n"));
    int32_t time_of_start, useconds;
    useconds = time_of_start = get_current_time();

    int32_t cart_position, pendulum_angle;
    cart_position =  get_cart_position();

    int16_t current_reference, current_measured;
    while (useconds < time_of_start+duration_ms*1000L) {
        useconds = get_current_time();
        int32_t cur_ms = (useconds-time_of_start)/1000L;
        if (cur_ms%(1000000L/freq) > (1000000L/2L)/freq) {
            current_reference = -amplitude;
        } else {
            current_reference =  amplitude;
        }
        
        current_measured = current(current_reference);
        cart_position  = get_cart_position();
        pendulum_angle = get_pendulum_angle();

        fprintf_P(uart_stream_ptr, PSTR("%ld,%d,%d,%ld,%ld\r\n"), useconds, current_reference, current_measured, cart_position, pendulum_angle);
    }
    current(0);
}


int main(void) {
    OUTPUT(AMPLIFIER_ENABLE_PIN);
    CLEAR(AMPLIFIER_ENABLE_PIN);

    adc_init();
    pwm_init();
    timer_init();
    pwm_init();
    decoder_init();
    shift_register_init();

    SET(AMPLIFIER_ENABLE_PIN);
    _delay_ms(1000);
    {
        int32_t tmp = 0;
        for (int16_t i=0; i<5000; i++) {
            _delay_ms(1);
            ATOMIC_BLOCK(ATOMIC_FORCEON) {
                tmp += adc0;
            }
        }
        adc0_zero = tmp/50L;
    }


    uart_init();
    FILE uart_stream = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);
    stdin = stdout = &uart_stream;

    SET(AMPLIFIER_ENABLE_PIN);
    decoder_reset();
    reset_current_time();

    if (1) {
        stabilize(&uart_stream);
        while (0) {
            fprintf_P(&uart_stream, PSTR("%ld %ld\r\n"), get_pendulum_angle(), pendulum_offset);
            _delay_ms(100);
        }
    }

//    chirp_current_open_loop(1500, 1000L, 5000L, 5L*1000L, &uart_stream);
//    chirp_current_open_loop(2500, 2000L, 9000L, 5L*1000L, &uart_stream);
//    constant_current_open_loop(0, 1L*1000L, &uart_stream);
//    square_wave(800L, 2000L, 5L*1000L, &uart_stream);
//    random_current(1800, 5L*1000L, &uart_stream);

//  constant_current_open_loop(3000L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(2000L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(1000L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(0L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(-1000L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(-2000L, 1L*1000L, &uart_stream);
//  constant_current_open_loop(-3000L, 1L*1000L, &uart_stream);


    CLEAR(AMPLIFIER_ENABLE_PIN);
    return 0;
}

